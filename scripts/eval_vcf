#!/usr/bin/env python
import tempfile
from os.path import dirname, abspath, join, basename, isfile
import click
import os
import yaml
from ngs_utils.file_utils import splitext_plus
from ngs_utils.logger import err, critical

from umccrise.utils import get_loc, find_loc
from umccrise import vcf_evaluation

import locale
try:
    if 'UTF-8' not in locale.getlocale(locale.LC_ALL):
        locale.setlocale(locale.LC_ALL, 'en_AU.UTF-8')
except TypeError:
    pass


here = dirname(abspath(vcf_evaluation.__file__))


def validate_inp(ctx, params, value):
    if not value:
        raise click.BadParameter('Provide at least one VCF file')
    return value


@click.command()
@click.argument('truth')
@click.argument('vcfs', nargs=-1, type=click.Path(exists=True), callback=validate_inp)
@click.option('-g', 'genome', default='GRCh37')
@click.option('-o', 'output_dir', type=click.Path())
@click.option('-r', 'regions', type=click.Path())
@click.option('-j', 'jobs', type=click.INT, default=1)
@click.option('--anno-tricky', 'anno_tricky', is_flag=True)
def main(truth, vcfs, genome, output_dir=None, regions=None, jobs=1, anno_tricky=False):
    config = {
        'samples': {splitext_plus(basename(v))[0]: abspath(v) for v in vcfs
                    if v.endswith('.vcf') or v.endswith('.vcf.gz')},
        'anno_tricky': anno_tricky,
    }
    if regions:
        config['sample_regions'] = regions

    loc = find_loc()

    if isfile(truth):
        config['truth_variants'] = abspath(truth)
    elif loc:
        if truth in loc.truth_sets:
            if genome not in loc.truth_sets[truth]:
                critical(f'Truth set "{truth}" not found for genome "{genome}" at file system "{loc.name}"')
            config['truth_variants'] = loc.truth_sets[truth][genome]['vcf']
            if 'bed' in loc.truth_sets[truth][genome]:
                config['truth_regions'] = loc.truth_sets[truth][genome]['bed']
        else:
            critical(f'First argument must be either a VCF file, or a value from: {", ".join(loc.truth_sets.keys())}.')
    else:
        assert isfile(truth), 'File for truth does not exist, and cannot automatically find it by location.'
        config['truth_variants'] = abspath(truth)

    if isfile(genome):
        config['reference_fasta'] = genome
    elif loc:
        config['reference_fasta'] = f'{genome}/seq/{genome}.fa'
    else:
        assert isfile(genome), 'File for genome fasta does not exist, and cannot automatically find it by location.'

    f = tempfile.NamedTemporaryFile(mode='wt', delete=False)
    yaml.dump(config, f)
    f.close()

    cmd = (f'snakemake ' +
           f'--snakefile {join(here, "Snakefile")} ' +
           f'--printshellcmds ' +
          (f'--directory {output_dir} ' if output_dir else ' ') +
           f'--configfile {f.name} '
           f'--jobs {jobs} '
           )
    print(cmd)
    os.system(cmd)
    if output_dir:
        out_file = join(output_dir, 'report.tsv')
        if isfile(out_file):
            print(f'Results are in "{output_dir}" folder. E.g. final report saved to "{output_dir}/report.tsv"')


if __name__ == '__main__':
    main()
