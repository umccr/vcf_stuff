#!/usr/bin/env python

from os.path import dirname, abspath, join, basename, isfile
import click
from ngs_utils.file_utils import splitext_plus, verify_file
from ngs_utils.logger import err, critical
from ngs_utils.snakemake_utils import run_snakemake
from hpc_utils.hpc import find_loc, get_ref_file, get_genomes_d
from vcf_stuff.eval_vcf import package_path
from ngs_utils.utils import set_locale; set_locale()

loc = find_loc()


@click.command()
@click.argument('truth')
@click.argument('vcfs', nargs=-1, type=click.Path(exists=True))
@click.option('-g', 'genome', default='GRCh37')
@click.option('--ref-fasta', 'ref_fasta')
@click.option('-o', 'output_dir', type=click.Path())
@click.option('-r', 'regions', type=click.Path())
@click.option('-j', 'jobs', type=click.INT, default=1)
@click.option('--anno-tricky', 'anno_tricky', is_flag=True)
@click.option('--anno-dp-af', 'anno_dp_af', is_flag=True)
@click.option('--remove-anno', 'remove_anno', is_flag=True)
@click.option('--anno-pon', 'anno_pon', is_flag=True)
def main(truth, vcfs, genome, ref_fasta=None, output_dir=None, regions=None, jobs=1, anno_tricky=False, anno_dp_af=False,
         remove_anno=False, anno_pon=False):
    if not vcfs:
        raise click.BadParameter('Provide at least one VCF file')

    if remove_anno is True and anno_dp_af is True:
        raise click.BadParameter('--anno-dp-af and --remove-anno cannot be set at the same time')

    conf = {
        'samples': {splitext_plus(basename(v))[0]: abspath(v) for v in vcfs
                    if v.endswith('.vcf') or v.endswith('.vcf.gz')},
        'anno_tricky': anno_tricky,
        'anno_dp_af': anno_dp_af,
        'remove_anno': remove_anno,
        'anno_pon': anno_pon,
    }
    if regions:
        conf['sample_regions'] = abspath(regions)

    get_ref(genome, conf, truth, ref_fasta)

    run_snakemake(join(package_path(), "vcf.smk"), conf, jobs, output_dir)

    if output_dir:
        out_file = join(output_dir, 'report.tsv')
        if isfile(out_file):
            print(f'Results are in "{output_dir}" folder. E.g. final report saved to "{output_dir}/report.tsv"')


def get_ref(genome, conf, truth, ref_fasta):
    # Genome
    conf['genome'] = genome

    genome_d = None
    if ref_fasta:
        conf['reference_fasta'] = verify_file(ref_fasta, is_critical=True)
        genome = splitext_plus(basename(genome))[0]
    elif loc:
        conf['reference_fasta'] = get_ref_file(genome, loc=loc)
        genome_d = get_genomes_d(genome, loc=loc)
    else:
        critical(f'Genome {genome}: fasta file does not exist, or cannot automatically find it by location.')

    # Truth set
    if isfile(truth):
        conf['truth_variants'] = abspath(truth)
    elif genome_d:
        truth_set_d = genome_d.get('truth_sets', {}).get(truth)
        if not truth_set_d:
            critical(f'First argument must be either a VCF file, or a value from:'
                     f' {", ".join(genome_d.get("truth_sets").keys())}.'
                     f' Truth set "{truth}" was not found in the file system or in hpc.py'
                     f' for genome "{genome}" at file system "{loc.name}"')

        conf['truth_variants'] = abspath(truth_set_d['vcf'])
        if 'bed' in truth_set_d:
            conf['truth_regions'] = abspath(truth_set_d['bed'])
    else:
        critical(f'Truth set {truth}: file does not exist, or cannot automatically find it by location.')


if __name__ == '__main__':
    main()
