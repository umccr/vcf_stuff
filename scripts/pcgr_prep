#!/usr/bin/env python

import sys
from pprint import pprint
import click
from os.path import isfile, join
from cyvcf2 import VCF, Writer
import re
import numpy as np

from ngs_utils.logger import warn, critical
from ngs_utils.vcf_utils import get_sample_ids, add_cyvcf2_hdr, get_sample_names
from ngs_utils.file_utils import get_ungz_gz
from ngs_utils.call_process import run_simple

from ngs_utils.utils import set_locale
set_locale()

@click.command()
@click.argument('input_file', type=click.Path(exists=True))
@click.option('-o', 'output_file', type=click.Path())
@click.option('-tn', 'tumor_vcf_sample', help='Tumor sample name(s) in the VCF')
@click.option('-nn', 'normal_vcf_sample', help='Normal sample name(s) in the VCF')
@click.option('-rn', 'rna_vcf_sample', help='RNA sample name(s) in the VCF')
def main(input_file, output_file=None,
         tumor_vcf_sample=None, normal_vcf_sample=None, rna_vcf_sample=None):
    """ Prepares a VCF file for exposing in PCGR:
        adds TUMOR_AF, NORMAL_AF, TUMOR_DP, NORMAL_DP, RNA_AF, RNA_DP fields.
    """

    # will throw a critical error if it can't guess sample names:
    names = get_sample_names(
        input_file,
        provided_tumor_name=tumor_vcf_sample,
        provided_normal_name=normal_vcf_sample,
        provided_rna_name=rna_vcf_sample,
    )
    ids = get_sample_ids(
        input_file,
        provided_t_name=tumor_vcf_sample,
        provided_n_name=normal_vcf_sample,
        provided_r_name=rna_vcf_sample,
    )
    r_index = []
    if rna_vcf_sample:
        t_name, n_name, r_name = names
        t_index, n_index, r_index = ids
    else:
        t_name, n_name = names
        t_index, n_index = ids

    # t_index will be an array if there are multiple tumors (i.e. tumor_vcf_sample is comma-separated)
    t_indices = [i for i in (t_index if isinstance(t_index, list) else [t_index]) if i is not None]
    n_indices = [i for i in (n_index if isinstance(n_index, list) else [n_index]) if i is not None]
    r_indices = [i for i in (r_index if isinstance(r_index, list) else [r_index]) if i is not None]

    if len(t_indices + n_indices) > 1 and not tumor_vcf_sample or not normal_vcf_sample:
        warn(f'Assuming tumor name(s): {t_name}' +
             (f', normal name(s): {n_name}' if n_name else '') +
             '. If it\'s incorrect, please provide sample name(s) explicitly '
             'with -tn (and -nn options).')

    vcf = VCF(input_file, gts012=True)

    tumor_prefix = 'TUMOR_'
    normal_prefix = 'NORMAL_'
    rna_prefix = 'RNA_'

    # Add headers
    new_header = []
    for h in vcf.raw_header.strip().split('\n'):
        # Reached the last row of the header, adding new lines right before CHROM:
        if h.startswith('#CHROM'):
            for tag in ['AF', 'DP', 'VD']:
                if tag in ['VD', 'DP']:
                    type = 'Integer'
                else:
                    type = 'Float'
                if tag in ['AD', 'VD']:
                    number = 'A'
                else:
                    number = '1'

                tumor_tag = tumor_prefix + tag
                normal_tag = normal_prefix + tag
                rna_tag = rna_prefix + tag

                add_cyvcf2_hdr(vcf, new_header=new_header, id=tumor_tag, number=number, type=type,
                               descr=f"{tag} in tumor sample")
                if n_indices:
                    add_cyvcf2_hdr(vcf, new_header=new_header, id=normal_tag, number=number, type=type,
                                   descr=f"{tag} in control sample")
                if r_indices:
                    add_cyvcf2_hdr(vcf, new_header=new_header, id=rna_tag, number=number, type=type,
                                   descr=f"{tag} in RNA sample")

            if not any(h2.startswith(f'##FORMAT=<ID=AD,') for h2 in vcf.raw_header.split('\n')):
                # for adding the AD field into FORMAT:
                add_cyvcf2_hdr(vcf, hdr='FORMAT', new_header=new_header, id='AD', number='R', type='Integer',
                               descr=f"Allelic depths for the ref and alt alleles in the order listed")

        if not any(h.startswith(f'##INFO=<ID={p+tag},')
                   for tag in ['AF', 'DP', 'VD']
                   for p in [tumor_prefix, normal_prefix, rna_prefix]):
            # to make sure we don't add duplicated TUMOR_AF,... fields
            new_header.append(h.strip())

    out = sys.stdout
    if output_file:
        output_ungz, output_gz = get_ungz_gz(output_file)
        out = open(output_ungz, 'w')
    for h_line in new_header:
        out.write(h_line + '\n')

    # Go through each record and add new INFO fields
    for rec in vcf:
        af, dp, vd, ad = _collect_vals_per_sample(rec)

        # when there are multiple samples, using the sample with the max VD, then DP
        ti_with_max_vd = None
        ni_with_max_vd = None
        ri_with_max_vd = None
        for t, v in zip(['VD', 'DP', 'AF'], [vd, dp, af]):
            if v is not None:
                if ti_with_max_vd is None:
                    _, ti_with_max_vd = max(
                        (v[ind], ind)
                        for ind in t_indices
                        if _to_string(v[ind]) is not None)
                rec.INFO[tumor_prefix + t] = _to_string(v[ti_with_max_vd])

                if len(n_indices) > 0:
                    if ni_with_max_vd is None:
                        _, ni_with_max_vd = max(
                            (v[ind], ind)
                            for ind in n_indices
                            if _to_string(v[ind]) is not None)
                    rec.INFO[normal_prefix + t] = _to_string(v[ni_with_max_vd])

                if len(r_indices) > 0:
                    if ri_with_max_vd is None:
                        _, ri_with_max_vd = max(
                            (v[ind], ind)
                            for ind in r_indices
                            if _to_string(v[ind]) is not None)
                    rec.INFO[rna_prefix + t] = _to_string(v[ri_with_max_vd])

        # Writing AD into FORMAT for Purple
        if ad is not None and 'AD' not in rec.FORMAT:
            rec.set_format('AD', ad)

        out.write(str(rec))

    if output_file:
        out.close()

    if output_file and output_file.endswith('.gz'):
        output_ungz, output_gz = get_ungz_gz(output_file)
        run_simple(f'bgzip -f {output_ungz}')
        run_simple(f'tabix -p vcf {output_gz}')

    sys.stderr.write('Done\n')


def _to_string(v):
    if isinstance(v, float) or isinstance(v, int):
        return str(v)
    elif len(v.shape) == 0:
        return str(v)
    else:
        return ','.join(map(str, list(v)))



''' 
VarDict
FORMAT/DP,       FORMAT/AF,     FORMAT/VD,                     

Mutect2                     
FORMAT/DP,       FORMAT/AF,     FORMAT/AD[1:]                  
                                       
Freebayes                                                                          
FORMAT/DP        FORMAT/AD = ref_count,alt_count               
                                       
GATK-Haplotype                                                                     
FORMAT/DP        FORMAT/AD = ref_count,alt_count               
                           
Strelka2 - germline                                                 
SNV:                       
sum(alt_counts)  FORMAT/AD = ref_count,alt_counts              
INDEL:                       
sum(alt_counts)  FORMAT/AD = ref_count,alt_counts              
                  
Strelka2 - somatic                                   
SNV:                  
FORMAT/DP        FORMAT/{ALT}U[0] = alt_count(tier1,tier2)
INDEL:                  
FORMAT/DP        FORMAT/TIR = alt_count(tier1,tier2)

SAGE
FORMAT/DP        FORMAT/AD = ref_count,alt_count

Varlociraptor
FORMAT/DP        FORMAT/AF


### AF:
    If FORMAT/AF exists, report it as af (vardict, mutect).
    Else, calculate from ad (depth per allele):
        - Check FORMAT/AD (freebayes, gatk-haplotype, strelka2 germline)
        - Else, check FORMAT/*U (strelka2 somatic)

### DP
    If FORMAT/DP exists, report it as dp,
    Else, report sum(ad)

### VD
    if FORMAT/VD exists (varidct), report it as `vd`.
    Else, report ad[1:]
'''


warnings = set()


def _collect_vals_per_sample(rec):
    # colleting the following values:
    dp = af = vd = ad = None

    if 'AF' in rec.FORMAT:
        af = rec.format('AF')[:,0]
    if 'DP' in rec.FORMAT:
        dp = rec.format('DP')[:,0]
    if 'VD' in rec.FORMAT:
        vd = rec.format('VD')[:,0:]
    if 'AD' in rec.FORMAT:
        ad = rec.format('AD')[:,0:]

    if dp is None:
        # strelka2 germline?
        if ad is not None:
            dp = np.sum(ad, axis=1)

    if vd is None:
        if ad is not None:
            vd = ad[:,1:2]  # AD=REF,ALT so 1: is the position of ALTs
        elif 'TIR' in rec.FORMAT:  # strelka2 somatic indel?
            vd = np.array([rec.format('TIR')[:,0]]).transpose()
        elif rec.REF + 'U' in rec.FORMAT:  # strelka2 somatic snp?
            vd = np.array([rec.format(alt + 'U')[:,0] for alt in rec.ALT]).transpose()
        elif af is not None and dp is not None:  # varlociraptor?
            af = af.reshape(af.shape[0], 1)
            aft = af.transpose()
            vd = np.round((dp * aft)).astype(int).transpose()
        else:
            wrn = f'Cannot read or infer variant depth. Unknown caller?'
            if wrn not in warnings:
                warn(f'{wrn} at record: {rec}\n' 
                     'This warning may appear multiple times. Showing once.')
            warnings.add(wrn)

    if af is None:  # strelka2 before bcbio populated AFs? or SAGE?
        if vd is not None and dp is not None:
            vdt = vd.transpose()
            af = np.true_divide(vdt, dp, where=dp!=0, out=np.zeros(vdt.shape)).transpose()

    if ad is None:
        ref_depth = None
        if rec.REF + 'U' in rec.FORMAT:
            ref_depth = rec.format(rec.REF + 'U')[:,0]
        elif vd is not None:
            ref_depth = dp - np.sum(vd, axis=1)
        if ref_depth is not None:
            ad = np.zeros((vd.shape[0], vd.shape[1] + 1), dtype=vd.dtype)
            ad[:,0] = ref_depth
            ad[:,1:] = vd

    return af, dp, vd, ad


def _parse_tag(rec, header_by_tag, tag, d, tumor_index, control_index):
    header = header_by_tag[tag]
    if header:
        if header['HeaderType'] == 'FORMAT':
            data = rec.format(header['ID'], header['python_type'])
            d[tag]['tumor'] = str(data[tumor_index][0])

            sample_dim = data.shape[0]
            if sample_dim >= 2:
                d[tag]['normal'] = str(data[control_index][0])

            if d[tag]['tumor']  == '-2147483648': d[tag]['tumor']  = -1
            if d[tag]['normal'] == '-2147483648': d[tag]['normal'] = -1
        else:
            d[tag]['tumor'] = str(rec.INFO[header['ID']])


if __name__ == '__main__':
    main()
