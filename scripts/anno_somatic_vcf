#!/usr/bin/env python

import sys
from random import random
import string
import os
from os.path import dirname, abspath, join, basename, isfile, isdir
import click
import subprocess
from hpc_utils import hpc
from ngs_utils.call_process import run_simple
from ngs_utils.file_utils import which, safe_mkdir, splitext_plus
from ngs_utils.logger import critical
from ngs_utils.snakemake_utils import run_snakemake
from vcf_stuff.filtering import package_path
from ngs_utils.utils import set_locale; set_locale()


@click.command()
@click.argument('vcf', type=click.Path(exists=True))
@click.option('-g', 'genome', default='GRCh37')
@click.option('-o', 'output_file', type=click.Path())
@click.option('-w', '--work-dir', 'work_dir', type=click.Path())
@click.option('--genomes-dir', 'genomes_dir')

@click.option('-n', '--dryrun', 'dryrun', is_flag=True, help='Propagated to snakemake. Prints rules and commands '
                                                             'to be run without actually executing them.')
@click.option('--unlock', 'unlock', is_flag=True)
@click.option('--report', 'report',
              help='Propagated to snakemake. Create an HTML report with results and statistics. '
                   'Needs to end in ".html".')
@click.option('--dag', 'dag', is_flag=True,
              help='Propagated to snakemake. Print the DAG of jobs in the dot language. '
                   'Usage: umccrise --dag > tmp.txt; cat <cleaned-tmp.txt> | dot -Tsvg > dag.svg')
@click.option('--tibanna', 'tibanna', is_flag=True,
              help='Uses tibanna to run snakemake rules on AWS. '
                   'Need to first assume role, and deploy tibanna (needs an s3 bucket for provisioning):\n'
                   '$ aws-google-auth ...'
                   '$ tibanna deploy_unicorn -g my_unicorn -b my_bucket --no-setenv'
                   '$ export TIBANNA_DEFAULT_STEP_FUNCTION_NAME=tibanna_unicorn_my_unicorn'
              )
@click.option('--tibanna-id', 'tibanna_id',
              help='Will use this ID to access tibanna resources. Will try to deploy if doesn\'t exist.')
@click.option('--output-s3', 'output_s3',
              help='Requied to be used along with --tibanna. Output will be stored in the specified s3 location')

def main(vcf, genome, output_file, work_dir=None, genomes_dir=None,
         dryrun=None, unlock=None, report=None, dag=None, tibanna=False, tibanna_id=None, output_s3=None):

    if not vcf.endswith('.vcf.gz'):
        raise click.BadParameter('VCF must be bgzip compresed')
    if not output_file:
        raise click.BadParameter('Provide path to output VCF file with -o')
    if not (output_file.endswith('.vcf') or output_file.endswith('.vcf.gz')):
        raise click.BadParameter('Path to output VCF must end with .vcf.gz')
    if output_file.endswith('.vcf'):
        output_file = output_file + '.gz'
    if not genome:
        raise click.BadParameter('Please, specify genome build with -g (GRCh37 or hg38)')

    conf = {
        'input_vcf': abspath(vcf),
        'output_vcf': abspath(output_file),
        'sample': basename(splitext_plus(output_file)[0]),
        'genome': genome,
    }
    if genomes_dir:
        conf['genomes_dir'] = genomes_dir

    if not work_dir:
        work_dir = output_file + '_work'
    safe_mkdir(work_dir)

    # Checking that pcgr.py is available, or if running in umccrise envirnoment so _pcgr env is there
    pcgr_env_path = hpc.secondary_conda_env('pcgr')
    conf['pcgr_env_path'] = pcgr_env_path

    tibanna_cfg = None
    if tibanna:
        tibanna_cfg = {
            'id': tibanna_id,
            'output_s3': output_s3,
        }

    run_snakemake(join(package_path(), "annotate_somatic_vcf.smk"), conf, output_dir=work_dir,
                  unlock=unlock, dryrun=dryrun, report=report, dag=dag, tibanna_cfg=tibanna_cfg)


if __name__ == '__main__':
    main()
