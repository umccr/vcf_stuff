#!/usr/bin/env python

from ngs_utils import conda_utils
from os.path import dirname, abspath, join, basename, isfile, isdir
import click
from ngs_utils.file_utils import which, safe_mkdir, splitext_plus
from ngs_utils.vcf_utils import get_sample_names
from ngs_utils.snakemake_utils import run_snakemake
from vcf_stuff.filtering import package_path
from ngs_utils.utils import set_locale; set_locale()


@click.command()
@click.argument('vcf', type=click.Path(exists=True))
@click.option('-g', 'genome', default='GRCh37')
@click.option('-o', 'output_file', type=click.Path())
@click.option('-w', '--work-dir', 'work_dir', type=click.Path())
@click.option('--genomes', '--genomes-dir', 'input_genomes_url', help='Path to the reference data. Can be s3 or gds')
@click.option('-tn', 'tumor_vcf_sample', help='Tumor sample name in the VCF '
              '(can use multiple values, in this case the maximum AF and the maximum DP will be used)')
@click.option('-nn', 'normal_vcf_sample', help='Normal sample name in the VCF')
@click.option('-rn', 'rna_vcf_sample', help='RNA sample name in the VCF')

@click.option('-n', '--dryrun', 'dryrun', is_flag=True, help='Propagated to snakemake. Prints rules and commands '
                                                             'to be run without actually executing them.')
@click.option('--unlock', 'unlock', is_flag=True)
@click.option('--report', 'report',
              help='Propagated to snakemake. Create an HTML report with results and statistics. '
                   'Needs to end in ".html".')
@click.option('--dag', 'dag', is_flag=True,
              help='Propagated to snakemake. Print the DAG of jobs in the dot language. '
                   'Usage: umccrise --dag > tmp.txt; cat <cleaned-tmp.txt> | dot -Tsvg > dag.svg')

def main(vcf, genome, output_file, work_dir=None, input_genomes_url=None,
         tumor_vcf_sample=None, normal_vcf_sample=None, rna_vcf_sample=None,
         dryrun=None, unlock=None, report=None, dag=None):

    if not vcf.endswith('.vcf.gz'):
        raise click.BadParameter('VCF must be bgzip compresed')
    if not output_file:
        raise click.BadParameter('Provide path to output VCF file with -o')
    if not (output_file.endswith('.vcf') or output_file.endswith('.vcf.gz')):
        raise click.BadParameter('Path to output VCF must end with .vcf.gz')
    if output_file.endswith('.vcf'):
        output_file = output_file + '.gz'
    if not genome:
        raise click.BadParameter('Please, specify genome build with -g (GRCh37 or hg38)')

    check_vcf_samples(vcf, tumor_vcf_sample, normal_vcf_sample, rna_vcf_sample)

    conf = {
        'input_vcf': abspath(vcf),
        'output_vcf': abspath(output_file),
        'sample': basename(splitext_plus(output_file)[0]),
        'genome': genome,
    }
    if input_genomes_url:
        conf['input_genomes_url'] = input_genomes_url
    if tumor_vcf_sample:
        conf['tumor_vcf_sample'] = tumor_vcf_sample
    if normal_vcf_sample:
        conf['normal_vcf_sample'] = normal_vcf_sample
    if rna_vcf_sample:
        conf['rna_vcf_sample'] = rna_vcf_sample

    if not work_dir:
        work_dir = output_file + '_work'
    safe_mkdir(work_dir)

    # Checking that pcgr.py is available, or if running in umccrise envirnoment so _pcgr env is there
    pcgr_env_path = conda_utils.secondary_conda_env('pcgr')
    conf['pcgr_env_path'] = pcgr_env_path

    run_snakemake(join(package_path(), "annotate_somatic_vcf.smk"), conf, cores=1, output_dir=work_dir,
                  unlock=unlock, dryrun=dryrun, report=report, dag=dag)


def check_vcf_samples(input_file, tumor_vcf_sample=None, normal_vcf_sample=None, rna_vcf_sample=None):
    """ Check if we can automatically determine the order of tumor and normal in VCF.
        get_sample_names will throw a critical error if it can't guess
    """
    get_sample_names(
        input_file,
        provided_tumor_name=tumor_vcf_sample,
        provided_normal_name=normal_vcf_sample,
        provided_rna_name=rna_vcf_sample,
    )


if __name__ == '__main__':
    main()
