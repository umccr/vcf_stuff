#!/usr/bin/env python
import sys
from os.path import dirname, abspath, join, basename, isfile, isdir
import click
from ngs_utils.file_utils import which
from ngs_utils.logger import critical
from ngs_utils.snakemake_utils import run_snakemake
from vcf_stuff.filtering import package_path
from ngs_utils.utils import set_locale; set_locale()


@click.command()
@click.argument('vcf', type=click.Path(exists=True))
@click.option('-g', 'genome', default='GRCh37')
@click.option('-o', 'output_file', type=click.Path())
@click.option('--unlock', 'unlock', is_flag=True)
def main(vcf, genome, output_file, unlock=None):

    if not vcf.endswith('.vcf.gz'):
        raise click.BadParameter('VCF must be bgzip compresed')
    if not output_file:
        raise click.BadParameter('Provide path to output VCF file with -o')
    if not (output_file.endswith('.vcf') or output_file.endswith('.vcf.gz')):
        raise click.BadParameter('Path to output VCF must end with .vcf.gz')
    if output_file.endswith('.vcf'):
        output_file = output_file + '.gz'
    if not genome:
        raise click.BadParameter('Please, specify genome build with -g (GRCh37 or hg38)')

    # Checking that pcgr.py is available, or if running in umccrise envirnoment so _pcgr env is there
    pcgr_env_path = None
    if not which('pcgr.py'):
        py_path = sys.executable  # /miniconda/envs/umccrise/bin/python
        env_path = dirname(dirname(py_path))  # /miniconda/envs/umccrise
        pcgr_env_path = env_path + '_pcgr'
        if not isdir(pcgr_env_path):
            critical('pcgr.py not found in PATH. Install pcgr with conda, or use umccrise environment')

    conf = {
        'input_vcf': vcf,
        'output_vcf': output_file,
        'genome': genome,
        'pcgr_env_path': pcgr_env_path
    }

    run_snakemake(join(package_path(), "annotate_somatic_vcf.smk"), conf, unlock=unlock)


if __name__ == '__main__':
    main()
