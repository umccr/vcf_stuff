#!/usr/bin/env python
import os
import sys
from os.path import isfile, join, dirname, abspath
import click
import subprocess

from ngs_utils.call_process import run_simple
from ngs_utils.file_utils import verify_file, safe_mkdir, verify_dir
from ngs_utils import logger
from ngs_utils.logger import warn, info
from ngs_utils.snakemake_utils import run_snakemake
from ngs_utils.utils import set_locale; set_locale()
from ngs_utils import snakemake_utils
from vcf_stuff import _version as version
from vcf_stuff.panel_of_normals import package_path


@click.command()
@click.version_option(version.__version__)
@click.option('-o', 'output_dir', type=click.Path(), help='Output directory [def: umccrised]')
@click.option('--test', 'test', is_flag=True, help='Test run on umccrise_test_data normals')
@click.option('--genomes', '--genomes-dir', 'genomes_dir', help='Path to the reference data')

# Cluster:
@click.option('-j', '--jobs', 'jobs', default=1, help='Maximum number of cores to use at single time (works both for '
              'local and cluster runs)')
@click.option('-c', '--cluster-auto', 'cluster', is_flag=True, help='Submit jobs to cluster')

# Snakemake:
@click.option('--forcerun', 'forcerun', help='Comma-separated rules that will be run even if the outputs exist. Propagated to snakemake, space-separated.')
@click.option('--unlock', is_flag=True, help='Use when you are rerunning after Ctrl+C. Propagated to snakemake.')
@click.option('--restart-times', default=0, help='Propagated to snakemake. Default is 0.')
@click.option('-n', '--dryrun', 'dryrun', is_flag=True, help='Propagated to snakemake. Prints rules and commands '
                                                             'to be run without actually executing them.')
@click.option('--report', 'report', help='Propagated to snakemake. Create an HTML report with results and statistics. '
                                         'Needs to end in ".html".')
@click.option('--dag', 'dag', is_flag=True, help='Propagated to snakemake. Print the DAG of jobs in the dot language. '
                                                 'Usage: umccrise â€“-dag > tmp.txt; cat <cleaned-tmp.txt> | dot -Tsvg > dag.svg')

def main(output_dir=None, test=False, genomes_dir=None,
         jobs=None, cluster=False,
         forcerun=None, unlock=False, restart_times=None, dryrun=False, report=None, dag=False):

    output_dir = output_dir or 'panel_of_normals'
    output_dir = safe_mkdir(abspath(output_dir))
    log_dir = safe_mkdir(join(output_dir, 'log'))
    logger.init(log_fpath_=join(log_dir, 'command.txt'), save_previous=True)

    conf = dict()

    if test:
        conf['test'] = 'yes'

    if genomes_dir:
        conf['genomes_dir'] = verify_dir(genomes_dir, is_critical=True)

    ###########################
    #### Running snakemake ####
    ###########################

    snakefile = join(package_path(), 'make_pon.smk')
    run_snakemake(snakefile, conf, jobs, output_dir, log_dir=log_dir, cluster=cluster,
                  forcerun=forcerun, unlock=unlock, restart_times=restart_times,
                  dryrun=dryrun, report=report, dag=dag)


if __name__ == '__main__':
    main()












