#!/usr/bin/env python

from os.path import dirname, abspath, join, basename, isfile
import click
from ngs_utils.file_utils import splitext_plus, verify_file
from ngs_utils.logger import err, critical
from ngs_utils.snakemake_utils import run_snakemake
from vcf_stuff.eval_cnv import package_path
from ngs_utils.utils import set_locale; set_locale()


@click.command()
@click.argument('truth')
@click.argument('cnv_files', nargs=-1, type=click.Path(exists=True))
@click.option('-g', 'genome', default='hg38')
@click.option('-o', 'output_dir', type=click.Path())
@click.option('-r', 'regions', type=click.Path())
@click.option('-j', 'jobs', type=click.INT, default=1)
@click.option('--unlock', is_flag=True, help='Propagaded to snakemake')
@click.option('--check-gt', is_flag=True, help='Some callers calculate, BAF and thus can report copy-neutral LOHs '
                                               '(AA, BB) that can be indistinguishable from normal AB genotypes '
                                               'by LRR-only callers (all will have CN=2). '
                                               'Unless this option is specified, the tool will ignore CN=2.')
def main(truth, cnv_files, genome, output_dir=None, regions=None, jobs=1, unlock=False, check_gt=False):
    if not cnv_files:
        raise click.BadParameter('Provide at least one input CNV file')

    conf = {
        'samples': {splitext_plus(basename(v))[0]: abspath(v) for v in cnv_files},
        'genome': genome,
        'check_gt': check_gt,
        'truth_variants': abspath(truth),
    }
    if regions:
        conf['sample_regions'] = abspath(regions)

    run_snakemake(join(package_path(), "cnv.smk"), conf, jobs, output_dir, forcerun='table report', unlock=unlock)

    if output_dir:
        out_file = verify_file(join(output_dir, 'report.tsv'), is_critical=True)
        out_html = verify_file(join(output_dir, 'report.html'), is_critical=True)
        assert isfile(out_file) and isfile(out_html)
        print(f'Results are in "{output_dir}" folder.\n'
              f'  Data in TSV: "{output_dir}/report.tsv"\n'
              f'  HTML report: "{output_dir}/report.html"')


if __name__ == '__main__':
    main()
