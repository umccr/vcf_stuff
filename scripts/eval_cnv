#!/usr/bin/env python

from os.path import dirname, abspath, join, basename, isfile
import click
import os
import yaml
from ngs_utils.file_utils import splitext_plus
from ngs_utils.logger import err, critical
from ngs_utils.call_process import run_simple
from hpc_utils.hpc import find_loc, get_ref_file, get_genomes_d
from vcf_stuff.eval import package_path, run_snakemake
from ngs_utils.utils import set_locale; set_locale()

loc = find_loc()


@click.command()
@click.argument('truth')
@click.argument('cnv_files', nargs=-1, type=click.Path(exists=True))
@click.option('-g', 'genome', default='GRCh37')
@click.option('-o', 'output_dir', type=click.Path())
@click.option('-r', 'regions', type=click.Path())
@click.option('-j', 'jobs', type=click.INT, default=1)
@click.option('--unlock', is_flag=True, help='Propagaded to snakemake')
@click.option('--check-gt', is_flag=True, help='Some callers use BAF to calculate more exact CN genotype '
                                               '(AB, AA, BB, AAB, etc) rather than just a CN number (1, 2, 3...), '
                                               'so the CN=2 events are differenet from no-event. '
                                               'Unless this option is used, the tool will ignore CN=2.')
def main(truth, cnv_files, genome, output_dir=None, regions=None, jobs=1, unlock=False, check_gt=False):
    if not cnv_files:
        raise click.BadParameter('Provide at least one input CNV file')

    conf = {
        'samples': {splitext_plus(basename(v))[0]: abspath(v) for v in cnv_files},
        'genome': genome,
        'check_gt': check_gt,
    }
    if regions:
        conf['sample_regions'] = abspath(regions)

    get_ref(genome, conf, truth)

    run_snakemake(join(package_path(), "cnv.smk"), conf, jobs, output_dir, force_rerun='table report', unlock=unlock)

    if output_dir:
        out_file = join(output_dir, 'report.tsv')
        if isfile(out_file):
            print(f'Results are in "{output_dir}" folder. E.g. final report saved to "{output_dir}/report.tsv"')

def get_ref(genome, conf, truth):
    genome_d = None
    if loc:
        genome_d = get_genomes_d(genome, loc=loc)
    else:
        critical(f'Genome {genome} data does not exist for location {loc.name}.')

    # Truth set
    if isfile(truth):
        conf['truth_variants'] = abspath(truth)
    elif genome_d:
        truth_set_d = genome_d.get('truth_sets', {}).get(truth)
        if not truth_set_d:
            critical(f'First argument must be either a CNS/BED file, or a value from:'
                     f' {", ".join(genome_d.get("truth_sets").keys())}.'
                     f' Truth set "{truth}" was not found in the file system or in hpc.py'
                     f' for genome "{genome}" at file system "{loc.name}"')

        conf['truth_variants'] = abspath(truth_set_d['cnv'])
        if 'bed' in truth_set_d:
            conf['truth_regions'] = abspath(truth_set_d['bed'])
    else:
        critical(f'Truth set {truth}: file does not exist, or cannot automatically find it by location.')


if __name__ == '__main__':
    main()
