#!/usr/bin/env python
import math
import re
from collections import defaultdict
from os.path import join

import click

from ngs_utils import logger
from ngs_utils.file_utils import verify_file, verify_dir, adjust_path
from ngs_utils.utils import set_locale
set_locale()
from ngs_utils.vcf_utils import get_sample_ids
from ngs_utils.utils import OrderedDefaultDict, flatten
from vcf_stuff import iter_vcf
from vcf_stuff.filtering import add_cyvcf2_filter


@click.command()
@click.argument('input_file', type=click.Path(exists=True))
@click.option('-o', 'output_file', type=click.Path())
@click.option('-g', 'genome', default='GRCh37')
@click.option('--sb/--no-sb', '--strand-bias', 'strand_bias', is_flag=True, default=True)
@click.option('--hp', 'hp_coef', type=click.INT, help="Set to -1 to disable filtering")
@click.option('--vardict2mut', 'vardict2mut', is_flag=True, default=False)
def main(input_file, output_file, genome=None, strand_bias=None, hp_coef=None, vardict2mut=False):
    tumor_index, control_index = get_sample_ids(input_file)

    if vardict2mut:
        from vcf_stuff.filtering.ngs_reporting.vardict2mut import VarDict2Mut
        from vcf_stuff.filtering.ngs_reporting.config import get_filt_cfg, load_filt_cfg
        filt_cnf = load_filt_cfg(None, target_type='wgs')
        vardict2mut = VarDict2Mut(genome, filt_cnf, None, None)

    iter_vcf(input_file, output_file,
             proc_rec=_somatic_vcf_filter_rec,
             proc_hdr=_somatic_vcf_filter_hdr,
             tumor_index=tumor_index,
             control_index=control_index,
             strand_bias=strand_bias,
             hp_coef=hp_coef,
             vardict2mut=vardict2mut,
             )


def _somatic_vcf_filter_rec(rec, vcf, tumor_index=None, strand_bias=True, hp_coef=None, vardict2mut=None, **kwargs):
    t = rec.INFO.get('PCGR_TIER', '')
    # Tier 1 - variants of strong clinical significance
    # Tier 2 - variants of potential clinical significance
    # Tier 3 - variants of unknown clinical significance [UPD: excluded this tier as it often contains unknown variants, but in known onco/ts genes)
    # Tier 4 - other coding variants
    int_tier = int(t.split('_')[1]) if 'TIER' in t else 5  # converts "TIER_2" -> 2

    # Keeping all potential hostpots/actionable variants
    if (int_tier in [1, 2] or
        rec.INFO.get('HMF_HOTSPOT', False) or
        rec.INFO.get('PCGR_INTOGEN_DRIVER_MUT', False) or
        rec.INFO.get('PCGR_MUTATION_HOTSPOT', False) or
        any(t in rec.INFO.get('PCGR_CLINVAR_CLNSIG', '') for t in ['pathogenic', 'uncertain']) or
        rec.INFO.get('COSMIC_CNT', 0) >= 10 or
        rec.INFO.get('PCGR_TCGA_PANCANCER_COUNT', 0) >= 5 or
        rec.INFO.get('ICGC_PCAWG_HITS', 0) >= 3 or
        rec.INFO.get('SAGE_HOTSPOT') == 'known'):
        return rec

    # Else, applying LCR, PoN, depth and AF filters:
    #   Remove AF<10%
    #   Remove gnomad_AF>=0.01
    #   Remove PoN_CNT>=5
    #   Remove indels in "bad_promoter" tricky regions
    #   Remove variants overlapping the ENCODE blacklist https://github.com/Boyle-Lab/Blacklist,
    #   Remove VD<4
    #   Remove VD<6 in tricky regions:
    #     gc15, gc70to75, gc75to80, gc80to85, gc85, low_complexity_51to200bp, low_complexity_gt200bp,
    #     non-GIAB confident,
    #     LCR,
    #     SEGDUP
    else:
        af = rec.INFO.get('TUMOR_AF')
        if af is not None and af < 0.1:
            add_cyvcf2_filter(rec, 'AF10')

        if rec.INFO.get('ENCODE'):
            add_cyvcf2_filter(rec, 'ENCODE')

        if rec.INFO.get('gnomAD_AF', 0.) >= 0.01:
            # common in gnomAD => likely germline
            add_cyvcf2_filter(rec, 'gnomAD_common')

        if rec.INFO.get('PoN_CNT') is not None and rec.INFO.get('PoN_CNT') >= 5:
            # in panel of normals => likely a germline or an artefact
            add_cyvcf2_filter(rec, 'PoN')

        if not rec.is_snp and hp_coef != -1:
            # filtering indels in homopolymers
            rec = _check_hp(rec, af, _coef=hp_coef)

        vd = rec.INFO.get('TUMOR_VD', math.inf)

        if vd < 4:
            # too few reads supporting the variant
            add_cyvcf2_filter(rec, 'lowVD')

        # remove low AF and low DP variants in low complexity regions
        rec = _vd_lcr_filter(rec, vd)

        # filter strand biased variants in vardict
        if strand_bias:
            rec = _vardict_strand_bias(rec, tumor_index)

        if vardict2mut:
            rec = vardict2mut.filter(rec, tumor_index)

    return rec


def _vd_lcr_filter(rec, vd):
    """ Remove low AF and low DP variants in low complexity regions
    """
    if rec.INFO.get('TRICKY') is None:
        tricky_flags = [k.replace('TRICKY_', '') for k, v in rec.INFO if k.startswith('TRICKY_')]
        if tricky_flags:
            rec.INFO['TRICKY'] = '|'.join(tricky_flags)
            for f in tricky_flags:
                del rec.INFO[f'TRICKY_{f}']
    tricky_flags = rec.INFO.get('TRICKY', '').split('|')

    lcr = rec.INFO.get('SEGDUP') or set(tricky_flags) & {
        'gc15', 'gc70to75', 'gc75to80', 'gc80to85', 'gc85', 'heng_um75-hs37d5',
        'low_complexity_51to200bp', 'low_complexity_gt200bp', 'LCR'}

    if vd < 6:
        # a strictier read support threshold for variants in LCR
        if lcr:
            add_cyvcf2_filter(rec, 'LowVD_LCR')
        if not rec.INFO.get('HMF_GIAB_CONF'):
            add_cyvcf2_filter(rec, 'LowVD_GIAB_LCR')
        mpbl = max(flatten([rec.INFO.get('HMF_MAPPABILITY', 1.0)]))
        if mpbl < 0.9:
            add_cyvcf2_filter(rec, 'LowVD_LowMappability')

    if not rec.is_snp:
        # all indels in bad promoters are false positives in MB benchmark
        if 'bad_promoter' in tricky_flags:
            add_cyvcf2_filter(rec, 'bad_promoter')

    return rec


def _mq_filter(rec, vcf, tumor_index, vd):
    mq = rec.INFO.get('TUMOR_MQ')

    if 'NM' in vcf.FORMAT:  # vardict only
        if len(_callers(rec)) < 3:  # we wanna filter only vardict
            nm = float(rec.format('NM')[tumor_index])
            if vd < 6 & (mq < 60.0 and nm > 2.0 or mq < 55.0 and nm > 1.0):
                add_cyvcf2_filter(rec, 'NM_MQ_filter')

    return rec


def _somatic_vcf_filter_hdr(vcf):
    vcf.add_filter_to_header({'ID': 'gnomAD_common',        'Description': 'Occurs in gnomAD with frequency above 1%'})
    vcf.add_filter_to_header({'ID': 'PoN',                  'Description': 'Panel of normals hits 1 or more'})
    vcf.add_filter_to_header({'ID': 'ENCODE',               'Description': 'Hits ENCODE blacklist regions https://github.com/Boyle-Lab/Blacklist'})
    vcf.add_filter_to_header({'ID': 'bad_promoter',         'Description': 'Indel overlapping bad promoter tricky region'})
    vcf.add_filter_to_header({'ID': 'HP',                   'Description': 'Low AF indel in a homopolymer region (AF lt (INFO/MSI - 1)/0.4%'})
    vcf.add_filter_to_header({'ID': 'lowVD',                'Description': 'AF*DP below 3 (i.e. fewer than 3 reads support the variant)'})
    vcf.add_filter_to_header({'ID': 'LowVD_LCR',            'Description': 'AF*DP below 5 (i.e. fewer than 5 reads support the variant), and overlaps GC=0-15% or GC=70-100%, or an LCR longer than 50bp, or ENCODE low mappability'})
    vcf.add_filter_to_header({'ID': 'LowVD_GIAB_LCR',       'Description': 'AF*DP below 5 (i.e. fewer than 5 reads support the variant), and does not overlap GiaB high confidence regions'})
    vcf.add_filter_to_header({'ID': 'LowVD_LowMappability', 'Description': 'AF*DP below 5 (i.e. fewer than 5 reads support the variant), and overlaps a low mappability region'})
    vcf.add_filter_to_header({'ID': 'StrandBias',           'Description': 'Strand bias as reported by VarDict'})
    vcf.add_filter_to_header({'ID': 'StrandBias1:1',        'Description': 'Strand bias as reported by VarDict'})
    vcf.add_filter_to_header({'ID': 'StrandBias2:0',        'Description': 'Strand bias as reported by VarDict'})
    vcf.add_filter_to_header({'ID': 'StrandBias2:1',        'Description': 'Strand bias as reported by VarDict'})
    vcf.add_filter_to_header({'ID': 'ActGermline',          'Description': 'Strand bias as reported by VarDict'})
    vcf.add_filter_to_header({'ID': 'AF10',                 'Description': 'TUMOR_AF<10%'})
    vcf.add_info_to_header({'ID': 'AZ_hotspot',  'Description': 'Hotspot based on AZ data knowledge',                                                                   'Type': 'String', 'Number': '1'})
    vcf.add_info_to_header({'ID': 'AZ_artefact', 'Description': 'Artefact based on AZ data knowledge',                                                                  'Type': 'String', 'Number': '1'})
    if not '##INFO=<ID=TRICKY,' in vcf.raw_header:  # legacy
        vcf.add_info_to_header({'ID': 'TRICKY',      'Description': 'Tricky regions from bcbio folders at coverage/problem_regions/GA4GH and coverage/problem_regions/LCR', 'Type': 'String', 'Number': '1'})


def _check_hp(rec, af, _coef=None):
    _coef = _coef or 40

    """
    ### VarDict MSI ###
    Dynamic threshold for indels in homopolymers.
    Motivation:
        ICGC MB test set
                                                                                   TP    FP   FN Recall Prec   F1     F2     F3
        no filtering                                                               318 1378   29 91.64% 18.75% 31.13% 51.56% 65.99%
        static cutoff HP len<=5                                                     69   44  278 19.88% 61.06% 30.00% 22.98%
        AF>=10%, no HP filtering                                                   232   93  115 66.86% 71.38% 69.05% 67.72% 67.29%
        dyn AF cutoff by HP len, coef=40                                           226   80  121 65.13% 73.86% 69.22% 66.71% 65.91%
        dyn AF cutoff by HP len, coef=50                                           231   91  116 66.57% 71.74% 69.06% 67.54% 67.05%
        dyn AF cutoff by HP len, coef=60                                           233  100  114 67.15% 69.97% 68.53% 67.69% 67.42%
        dyn AF cutoff by HP len, coef=Inf (no filt)                                233  265  114 67.15% 46.79% 55.15% 61.77% 64.35%
        dyn AF cutoff by HP len, coef=40, min AF 35%                               225   78  122 64.84% 74.26% 69.23% 66.53% 65.67%
        dyn AF cutoff by HP len, coef=40, min AF 35%, filter VarDict only          232   94  115 66.86% 71.17% 68.95% 67.68% 67.27%
        dyn AF cutoff by HP len, coef=40, min AF 35%, min change len =2bp          225   82  122 64.84% 73.29% 68.81% 66.37% 65.60%
        dyn AF cutoff by HP len, coef=40, min AF 35%, min change len =2bp, HPx1    225   85  122 64.84% 72.58% 68.49% 66.25% 65.54%
        dyn AF cutoff by HP len, coef=40, min AF 35%, min change len =2bp, HPx1,3  225   85  122 64.84% 72.58% 68.49% 66.25% 65.54%
        dyn AF cutoff by HP len, coef=40, min AF 35%, HPx1,3                       225   81  122 64.84% 73.53% 68.91% 66.41% 65.62%

    AF>10% for homopolymers looks like a better idea, though we want to keep low frequency variants


    ### JOINX ###
    - Use approach https://github.com/genome/joinx/tree/master/integration-test/data/vcf-annotate-homopolymers
      to filter non-vardict calls (e.g. strelka2-alone)
      Result:
        - Compiles by travis and runs nicely, however that's only for linux.
        - Unfortunately, annotates only _homo_polymers, i.e. element length = 1.
        - Misses to annotate variants at 2 different HP joints.
        - Most of the variants filtered out as HP are truth:
            bcftools filter -i "HP_JOINX>0 & FILTER=='PASS'" batch1-ensemble-TP.FILT_HP40.Joinx.vcf.gz | bcftools query -f "%CHROM \t %POS \t %FILTER \t %HP_JOINX \t %TIERS\n" | grep tier | wc
            178   # Truth
            ... grep -v tier | wc
            67    # False

            # passed by joinx, filtered by us:
            bcftools filter -e "HP_JOINX>0 | FILTER=='PASS'" batch1-ensemble-TP.FILT_HP40.Joinx.vcf.gz |bcftools query -f "%TIERS\n" | grep tier | wc
            67    # Truth
            ... grep -v tier | wc
            468   # False
      TODO: try on a different truth set
    """

    hp_len = rec.INFO.get('MSILEN')
    hp_repeated = rec.INFO.get('MSI')
    if hp_len is None or hp_repeated is None:
        return rec

    # chg_len = abs(len(rec.REF) - len(rec.ALT[0]))
    # if chg_len > 2 * hp_len:  # caucious with long changes cause it might be real
    #     return rec

    if len(_callers(rec)) == 3:  # we wanna filter only vardict
        return rec

    af_threshold = (hp_repeated - 1) / _coef
    af_threshold = min(af_threshold, 0.35)
    # HP/_coef  40   50    60
    #  2       2.5    2    1.67
    #  3       5      4    3.33
    #  4       7.5    6    5
    #  5      10      8    6.67
    #  6      12.5   10    8.33
    #  7      15     12   10
    #  8      17.5   14.  11.7
    #  9      20     16   13.3
    # 10      22.5   18   15

    if hp_repeated >= 3 and af < af_threshold:
        add_cyvcf2_filter(rec, 'HP')
    return rec


def _callers(rec):
    if rec.INFO.get('CALLERS') is not None:
        callers = rec.INFO.get('CALLERS').split(',')
        return callers
    else:
        return 0


def _vardict_strand_bias(rec, tumor_index, damage_p_value=0.01, min_vd=5):
    """
    Filter VarDict variants with single strand support for ALT, while REF has
    both; or REF and ALT have opposite supporting strands.

    BIAS is in format X:Y, where X is the number of strands supporting REF,
    and Y is the number of strands supporting ALT. 0 represents a too low
    P value to call support.

    Evaluation:
        MB: HP40                     1136  228  127 89.94%  83.28% 86.49% 88.53% 89.23%   226    80  121 65.13%  73.86% 69.22% 66.71% 65.91%
        MB: HP40 + SB with min_vd=4  1122  182  141 88.84%  86.04% 87.42% 88.26% 88.55%   225    75  122 64.84%  75.00% 69.55% 66.65% 65.73%    #
        MB: HP40 + SB with min_vd=5  1133  186  130 89.71%  85.90% 87.76% 88.92% 89.31%   225    75  122 64.84%  75.00% 69.55% 66.65% 65.73%    # the best
        MB: HP40 + SB with min_vd=6  1135  200  128 89.87%  85.02% 87.37% 88.85% 89.36%   225    77  122 64.84%  74.50% 69.34% 66.57% 65.69%    #
        MB: HP40 + SB with min_vd=0  1136  214  127 89.94%  84.15% 86.95% 88.72% 89.33%   225    78  122 64.84%  74.26% 69.23% 66.53% 65.67%    #
    """

    if rec.INFO.get('CALLERS') is not None:
        callers = rec.INFO.get('CALLERS').split(',')
        if len(callers) == 3:  # we wanna only filter vardict
            return rec

    if 'BIAS' not in rec.FORMAT or 'SBF' not in rec.FORMAT:
        return rec

    bias = rec.format('BIAS')[tumor_index]
    sbf = float(rec.format('SBF')[tumor_index])

    ref, alt = map(int, bias.split(','))

    if ref < 2 or alt < 2 and sbf is not None:
        if ref == 2 and alt == 1 and sbf < damage_p_value * 10:
            # ALT has only single strand support, while REF has both
            add_cyvcf2_filter(rec, 'StrandBias2:1')

        if ref == 2 and alt == 0 and sbf < damage_p_value:
            # ALT has only single strand support and p-value is low, while reference has both
            add_cyvcf2_filter(rec, 'StrandBias2:0')

        if ref == alt == 1 and sbf < damage_p_value / 10:
            # Filter variants with opposite supporting strands for REF and ALT
            add_cyvcf2_filter(rec, 'StrandBias1:1')

    return rec


if __name__ == '__main__':
    main()

































