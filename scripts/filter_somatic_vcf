#!/usr/bin/env python

import click

from ngs_utils.utils import set_locale; set_locale()
from vcf_stuff import iter_vcf


PON_HITS = 2


@click.command()
@click.argument('input_file', type=click.Path(exists=True))
@click.option('-o', 'output_file', type=click.Path())
@click.option('-g', 'genome', default='GRCh37')
@click.option('-f', '--ref-fasta', 'ref_fasta', type=click.Path(exists=True))
def main(input_file, output_file, genome=None, ref_fasta=None):

    iter_vcf(input_file, output_file,
             proc_rec=_somatic_vcf_filter_rec,
             proc_hdr=_somatic_vcf_filter_hdr)


def _add_cyvcf2_filter(rec, filt):
    filters = rec.FILTER.split(';') if rec.FILTER else []
    filters.append(filt)
    f = ';'.join(filters)
    rec.FILTER = str(f)
    return rec


def _somatic_vcf_filter_rec(rec):
    t = rec.INFO.get('PCGR_TIER', '')
    int_tier = int(t.split('_')[1]) if 'TIER' in t else 5  # "TIER_2" -> 2
    # Keeping all variants with tier 1, 2, 3:
    # Tier 1 - variants of strong clinical significance
    # Tier 2 - variants of potential clinical significance
    # Tier 3 - variants of unknown clinical significance [UPD: excluded this tier as it often contains unknown variants, but in known onco/ts genes)

    tricky_flags = [k.replace('TRICKY_', '') for k, v in rec.INFO if k.startswith('TRICKY_')]
    if tricky_flags:
        rec.INFO['TRICKY'] = ','.join(tricky_flags)
    for f in tricky_flags:
        del rec.INFO[f'TRICKY_{f}']

    is_hs = rec.INFO.get('HMF_HOTSPOT', False) or \
            rec.INFO.get('PCGR_INTOGEN_DRIVER_MUT', False) or \
            rec.INFO.get('PCGR_MUTATION_HOTSPOT', False) or \
            any(t in rec.INFO.get('PCGR_CLINVAR_CLNSIG', '') for t in ["pathogenic", "uncertain"]) or \
            rec.INFO.get('PCGR_TCGA_PANCANCER_COUNT', 0) >= 5

    if int_tier in [1, 2] or is_hs:
        return rec
    # Applying LC, PoN, depth and AF filters to tier 4 and non-coding:
    # Tier 4 - other coding variants
    # Noncoding variants
    # Remove gnomad_AF>0.01
    # Remove PoN_CNT>=2         # {0 if issnp else 1}'
    # Remove indels in "bad_promoter" tricky regions
    # Remove DP*AF<3
    # Remove DP*AF<5 in tricky regions:
    #        gc15, gc70to75, gc75to80, gc80to85, gc85, low_complexity_51to200bp, low_complexity_gt200bp,
    #        non-GIAB confident,
    #        LCR,
    #        ENCODE,
    #        mappability<1
    else:
        # if rec.INFO['TUMOR_AF'] < 0.1:
        #     _add_cyvcf2_filter(rec, 'AF10')

        if rec.INFO.get('gnomAD_AF', 0.) >= 0.01:
            _add_cyvcf2_filter(rec, 'gnomAD_common')

        # second round of panel of normals
        pon = rec.INFO.get('PoN_CNT')
        if pon is not None and pon >= PON_HITS:
            _add_cyvcf2_filter(rec, 'PoN')

        # specieal treatment for indels
        if not rec.is_snp:
            # removing indels in bad promoter regions - all of those are artefacts in MB benchmark
            if 'bad_promoter' in tricky_flags:
                _add_cyvcf2_filter(rec, 'bad_promoter')
            # removing indels in homopolymers
            hp_len = rec.INFO.get('MSILEN')
            if hp_len is not None:
                hp_repeated = rec.INFO.get('MSI')
                if hp_repeated > 5:
                    _add_cyvcf2_filter(rec, 'HP>5')

        # removing low AF and low DP variants in low complexity regions
        lcr = rec.INFO.get('ENCODE') or set(tricky_flags) & {
            'gc15', 'gc70to75', 'gc75to80', 'gc80to85', 'gc85', 'heng_um75-hs37d5',
            'low_complexity_51to200bp', 'low_complexity_gt200bp',
            'LCR'}

        vd = round(rec.INFO['TUMOR_AF'] * rec.INFO['TUMOR_DP'])

        if vd < 3:  # fewer than 3 reads supporting the variant
            _add_cyvcf2_filter(rec, 'lowVD')

        elif vd < 5:  # fewer than 5 reads supporting an LCR variant
            if lcr:
                _add_cyvcf2_filter(rec, 'LowVD_LCR')
            if not rec.INFO.get('HMF_GIAB_CONF'):
                _add_cyvcf2_filter(rec, 'LowVD_GIAB_LCR')
            mpbl = max(map(float, rec.INFO.get('HMF_MAPPABILITY', '1.0').split(',')))
            if mpbl < 1.0:
                _add_cyvcf2_filter(rec, 'LowVD_LowMappability')

        # if rec.INFO['TUMOR_AF'] < 0.01:
        #     _add_cyvcf2_filter(rec, 'LowAF')

    return rec


def _somatic_vcf_filter_hdr(vcf):
    vcf.add_filter_to_header({'ID': 'gnomAD_common',        'Description': 'Occurs in gnomAD with frequency above 1%'})
    vcf.add_filter_to_header({'ID': 'PoN',                  'Description': 'Panel of normals hits 1 or more'})
    vcf.add_filter_to_header({'ID': 'bad_promoter',         'Description': 'Indel overlapping bad promoter tricky region'})
    vcf.add_filter_to_header({'ID': 'HP>5',                 'Description': 'Indel in a homopolymer region of length >5 elements (i.e. INFO/MSI>5)'})
    vcf.add_filter_to_header({'ID': 'lowVD',                'Description': 'AF*DP<3 (i.e. fewer than 3 reads support the variant)'})
    vcf.add_filter_to_header({'ID': 'LowVD_LCR',            'Description': 'AF*DP<5 (i.e. fewer than 5 reads support the variant), and overlaps LCR: GC<=15% or GC>=70, or low complexity region >51bp long, or ENCODE low mappability'})
    vcf.add_filter_to_header({'ID': 'LowVD_GIAB_LCR',       'Description': 'AF*DP<5 (i.e. fewer than 5 reads support the variant), and does not overlap GiaB high confidence regions'})
    vcf.add_filter_to_header({'ID': 'LowVD_LowMappability', 'Description': 'AF*DP<5 (i.e. fewer than 5 reads support the variant), and overlaps a low mappability region'})
    # vcf.add_filter_to_header({'ID': 'LowAF', 'Description': 'DP<25 & AF<5%'})
    # vcf.add_filter_to_header({'ID': 'af10', 'Description': 'AF<10%'})
    vcf.add_info_to_header({'ID': 'TRICKY','Description': 'Tricky regions from bcbio\'s coverage/problem_regions/GA4GH and coverage/problem_regions/LCR', 'Type': 'String', 'Number': '1'})

# def _somatic_vcf_filter_rec__pysam(rec):
#     """ using pysam
#     """
#     t = rec.info['PCGR_TIER']
#     int_tier = int(t.split('_')[1]) if 'TIER' in t else 5  # "TIER_2" -> 2
#     # Keeping all variants with tier 1, 2, 3:
#     # Tier 1 - variants of strong clinical significance
#     # Tier 2 - variants of potential clinical significance
#     # Tier 3 - variants of unknown clinical significance
#     if int_tier in [1, 2, 3] or rec.info.get('HMF_HOTSPOT', False) is True:
#         return rec
#     # Applying LC, PoN, depth and AF filters to tier 4 and non-coding:
#     # Tier 4 - other coding variants
#     # Noncoding variants
#     # Remove gnomad_AF >0.01
#     # Remove PoN_CNT>0         # {0 if issnp else 1}'
#     # Remove indels in "bad_promoter" tricky regions
#     # Remove DP<30 and AF<10% in tricky regions:
#     #        gc15, gc70to75, gc75to80, gc80to85, gc85, low_complexity_51to200bp, low_complexity_gt200bp,
#     #        non-GIAB confident,
#     #    unless coding in cancer genes
#     # Remove DP<25 and AF<5%
#     else:
#         # if rec.info['TUMOR_AF'] < 0.1:
#         #     rec.filter.add('AF10')
#
#         if rec.info.get('gnomAD_AF', 0.) >= 0.01:
#             rec.filter.add('gnomAD_common')
#
#         # second round of panel of normals
#         pon = rec.info.get('PoN_CNT')
#         if pon is not None and pon >= PON_HITS:
#             rec.filter.add('PoN')
#
#         tricky_set = set(rec.info.get('TRICKY', '').split(','))
#
#         # removing indels in bad promoter regions
#         if len(rec.ref) != len(rec.alts[0]) and 'bad_promoter' in tricky_set:
#             rec.filter.add('bad_promoter')
#
#         # removing low AF and low DP variants in low complexity regions
#         if rec.info['TUMOR_DP'] < 30 and rec.info['TUMOR_AF'] < 0.1:
#             if tricky_set & {'gc15', 'gc70to75', 'gc75to80', 'gc80to85', 'gc85',
#                              'low_complexity_51to200bp', 'low_complexity_gt200bp'}:
#                 rec.filter.add('LowAF_TRICKY')
#             if not rec.info.get('HMF_GIAB_CONF'):
#                 rec.filter.add('LowAF_GIAB_LCR')
#
#         if rec.info['TUMOR_DP'] < 25 and rec.info['TUMOR_AF'] < 0.01:
#             rec.filter.add('LowAF')
#
#     return rec
#
#
# def _somatic_vcf_filter_hdr__pysam(vcf):
#     vcf.header.filters.add('gnomAD_common', None, None, 'Occurs in gnomAD with frequency above 1%')
#     vcf.header.filters.add('PoN', None, None, f'Panel of normals: {PON_HITS} or more hits')
#     vcf.header.filters.add('bad_promoter', None, None, 'Indel overlapping bad promoter tricky region')
#     vcf.header.filters.add('LowAF_TRICKY', None, None, 'DP<30 & AF<10%, and: GC<=15% or GC>=70 or low complexity region >51bp long')
#     vcf.header.filters.add('LowAF_GIAB_LCR', None, None, 'DP<30 & AF<10%, and does not overlap GiaB high confidence regions')
#     vcf.header.filters.add('LowAF', None, None, 'DP<25 & AF<5%')
#     # vcf.add_filter_to_header({'ID': 'af10', 'Description': 'AF<10%'})


if __name__ == '__main__':
    main()
